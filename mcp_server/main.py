# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:40:54+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query, UploadFile

from models import (
    AutomaticInvitationsListVO,
    ClientWorkgroupExpandVO,
    ClientWorkgroupListVO,
    ContactsListVO,
    ContactUserVO,
    CountryListVO,
    DeactivationReasonListVO,
    EstimateExpandVO,
    EstimateListExpandVO,
    EstimatePO,
    FileListResponseVO,
    FileResponseVO,
    FileTagResponseVO,
    HTTPStatus,
    HTTPStatusVO,
    InvoiceDetailListExpandVO,
    InvoiceExpandVO,
    MultiExchangeRateListVO,
    MultiExchangeRatePersistListVO,
    ObjectStateListVO,
    OrderDetailVO,
    OrderDetailWithIndicatorVO,
    OrderExpandWorkgroupLevelVO,
    OrderListVO,
    OrderPO,
    OrderUpdPersistVO,
    OrderVO,
    OrderWorkgroupLevelListVO,
    ProfileImageVO,
    ProjectCategoryListVO,
    ProjectExpandVO,
    ProjectHomeUserFieldsListVO,
    ProjectIdListVO,
    ProjectListVO,
    ProjectPatchPO,
    ProjectPersistVO,
    ProjectStatusListVO,
    ProjectVO,
    PropertyParamListVO,
    QuoteExpandVO,
    QuoteListVO,
    QuoteOfWgLevelSimpleVO,
    QuotePutPersistVO,
    RfeExpandVO,
    RfeListVO,
    RfePO,
    RfqExpandVO,
    RfqListVO,
    RfqVO,
    RoleListVO,
    ShipmentExpandVO,
    ShipmentListVO,
    ShipmentLocationPersistVO,
    ShipmentLocationPostPersistVO,
    ShipmentLocationsPOSTResultVO,
    SpecHTTPStatusVO,
    SpecListVO,
    SpecPersistVO,
    SpecTemplateExpandVO,
    SpecTemplateListVO,
    SpecTypeFieldsListVO,
    SpecUpdatePersistVO,
    SpecVO,
    SupplierWorkgroupExpandVO,
    SupplierWorkgroupListVO,
    TaskCreatedVO,
    TaskExpandVO,
    TaskExpandWorkgroupLevelVO,
    TaskListVO,
    TaskPersistVO,
    TaskPriorityListVO,
    TaskStatusListVO,
    TaskTypeListVO,
    TaskWorkgroupLevelListVO,
    TeamMemberBaseInfVO,
    TeamMemberListVO,
    TeamMemberPO,
    TeamTemplateExpandVO,
    TeamTemplateListVO,
    TimeCardDetailVO,
    TimeCardListVO,
    TimeCardReceivedDetailVO,
    UserDetailsExpandVO,
    V1x1InvitedTeamMemberResultsVO,
    V1x1SpecExpandVO,
    V1X1SpecUpdatingPO,
    WgSpecPrdTypeRegPersistVO,
    WgTaskStatusListVO,
    WorkgroupAttributeListVO,
    WorkgroupExpandVO,
    WorkgroupHTTPStatusVO,
    WorkgroupListVO,
    WorkgroupMembersListVO,
    WorkgroupTypes,
    WorkgroupUpdPersistVO,
)

app = MCPProxy(
    contact={'x-twitter': 'NooshInc'},
    description='Full description of Noosh API',
    title='Noosh API application',
    version='1.0',
    servers=[{'url': 'http://example.com:80/v1'}],
)


@app.get(
    '/1.1/workgroups/{workgroup_id}/projects/{project_id}/fileTags',
    description=""" List Tags from Workgroup and Project. """,
    tags=['workgroup_management', 'project_management'],
)
def get_file_tags(workgroup_id: str, project_id: str = ...):
    """
    List Tags from Workgroup and Project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/1.1/workgroups/{workgroup_id}/projects/{project_id}/files',
    description=""" List Files from Project.  Works for Regular and Remote Files """,
    tags=['file_management', 'project_management'],
)
def get_files(workgroup_id: str, project_id: str = ...):
    """
    List Files from Project.  Works for Regular and Remote Files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/1.1/workgroups/{workgroup_id}/projects/{project_id}/files',
    description=""" Upload File to Project.  A multipart/form-data request with a name "file" """,
    tags=['file_management', 'file_upload_management', 'project_management'],
)
def upload_file(workgroup_id: str, project_id: str = ..., file: UploadFile = ...):
    """
    Upload File to Project.  A multipart/form-data request with a name "file"
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/1.1/workgroups/{workgroup_id}/projects/{project_id}/files/{file_id}',
    description=""" Get File from Project.  Works for Regular and Remote Files """,
    tags=['file_management', 'project_management'],
)
def get_file(workgroup_id: str, project_id: str = ..., file_id: str = ...):
    """
    Get File from Project.  Works for Regular and Remote Files
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/1.1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}',
    description=""" List a specific spec of project Level """,
    tags=['project_spec_handling', 'spec_management'],
)
def get_spec(workgroup_id: str, project_id: str = ..., spec_id: str = ...):
    """
    List a specific spec of project Level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/1.1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}',
    description=""" Update a specific Spec """,
    tags=['project_spec_handling', 'spec_management'],
)
def put_spec(
    workgroup_id: str,
    project_id: str = ...,
    spec_id: str = ...,
    body: V1X1SpecUpdatingPO = None,
):
    """
    Update a specific Spec
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/1.1/workgroups/{workgroup_id}/projects/{project_id}/teammembers',
    description=""" Invite a team member or all the members of team template for the specific project. """,
    tags=['team_management', 'workgroup_member_management'],
)
def post_team_member_of_project(
    workgroup_id: str, project_id: str = ..., body: TeamMemberPO = None
):
    """
    Invite a team member or all the members of team template for the specific project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/1.1/workgroups/{workgroup_id}/specTypes/{spec_type_id}/specTypeFields',
    description=""" Get Spec Type Fields """,
    tags=['project_spec_handling', 'spec_management'],
)
def get_spec_type_fields(workgroup_id: str, spec_type_id: str = ...):
    """
    Get Spec Type Fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/countries', description=""" List all countries """, tags=['country_management']
)
def get_country_list():
    """
    List all countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups',
    description=""" List the workgroups """,
    tags=[
        'workgroup_management',
        'client_workgroup_operations',
        'workgroup_member_management',
    ],
)
def get_workgroup_list(
    workgroup_name: Optional[str] = None,
    workgroup_types: Optional[WorkgroupTypes] = None,
):
    """
    List the workgroups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/automaticInvitations',
    description=""" List current user's automatic invitations info  """,
    tags=['workgroup_management', 'team_management', 'workgroup_member_management'],
)
def get_automatic_invitation_list(workgroup_id: str):
    """
    List current user's automatic invitations info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/billingRecipients',
    description=""" List Billing Recipients """,
    tags=['billing_management', 'workgroup_management'],
)
def get_billing_recipients(workgroup_id: str):
    """
    List Billing Recipients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/buyOrders',
    description=""" List the buy orders of workgroup """,
    tags=['workgroup_management', 'buy_order_management'],
)
def get_buy_order_list_of_workgroup(workgroup_id: str):
    """
    List the buy orders of workgroup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/buyOrders/{order_id}',
    description=""" Get a specific buy order of workgroup """,
    tags=['workgroup_management', 'buy_order_management'],
)
def get_buy_order_of_workgroup(workgroup_id: str, order_id: str = ...):
    """
    Get a specific buy order of workgroup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/clientWorkgroups',
    description=""" List client workgroups """,
    tags=['workgroup_management', 'client_workgroup_operations'],
)
def get_client_workgroup_list(workgroup_id: str):
    """
    List client workgroups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/clientWorkgroups/{client_workgroup_id}',
    description=""" Get a specific client workgroups """,
    tags=['workgroup_management', 'client_workgroup_operations'],
)
def get_specific_client_workgroup(workgroup_id: str, client_workgroup_id: str = ...):
    """
    Get a specific client workgroups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/clientWorkgroups/{client_workgroup_id}/projectCategory',
    description=""" List the project categories of client side """,
    tags=['client_workgroup_operations', 'workgroup_management'],
)
def get_project_category_list_of_client(
    workgroup_id: str, client_workgroup_id: str = ...
):
    """
    List the project categories of client side
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/clientWorkgroups/{client_workgroup_id}/projectHomeUserFields',
    description=""" List projec home user fields of client workgroup """,
    tags=['workgroup_management', 'client_workgroup_operations'],
)
def get_project_home_user_field_list_of_client(
    workgroup_id: str, client_workgroup_id: str = ...
):
    """
    List projec home user fields of client workgroup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/clientWorkgroups/{client_workgroup_id}/projectStatus',
    description=""" List the project status of client """,
    tags=['client_workgroup_operations', 'workgroup_management'],
)
def get_project_status_of_client(workgroup_id: str, client_workgroup_id: str = ...):
    """
    List the project status of client
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/contacts',
    description=""" List the contacts """,
    tags=['contact_management', 'workgroup_management', 'workgroup_member_management'],
)
def get_contact_list(workgroup_id: str):
    """
    List the contacts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/contacts/{user_id}',
    description=""" Contact Info """,
    tags=['contact_management', 'workgroup_member_management'],
)
def get_contact_user_info(workgroup_id: str, user_id: str = ...):
    """
    Contact Info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/customTaskStatus',
    description=""" Get custom task status of workgroup level """,
    tags=['workgroup_management', 'task_management'],
)
def get_wg_task_status_list_of_workgroup(workgroup_id: str):
    """
    Get custom task status of workgroup level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/customTaskTypes',
    description=""" Get custom task types of workgroup level """,
    tags=['workgroup_management', 'task_management'],
)
def get_custom_task_types_of_wg(workgroup_id: str):
    """
    Get custom task types of workgroup level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/deactivationReasons',
    description=""" List all deactivation reasons """,
    tags=['workgroup_management', 'client_workgroup_operations'],
)
def get_deactivation_reason_list(workgroup_id: str):
    """
    List all deactivation reasons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/defaultTaskPriority',
    description=""" Get default task priority list """,
    tags=['task_management', 'workgroup_management'],
)
def task_priority_list(workgroup_id: str):
    """
    Get default task priority list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/defaultTaskStatus',
    description=""" Get default task status list """,
    tags=['workgroup_management', 'task_management'],
)
def get_default_task_status_list(workgroup_id: str):
    """
    Get default task status list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/detail',
    description=""" Detail workgroup info """,
    tags=['workgroup_management', 'workgroup_member_management'],
)
def get_workgroup_detail(workgroup_id: str):
    """
    Detail workgroup info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/workgroups/{workgroup_id}/detail',
    description=""" Update a specific Workgroup """,
    tags=['workgroup_management', 'workgroup_member_management'],
)
def put_workgroup(workgroup_id: str, body: WorkgroupUpdPersistVO = None):
    """
    Update a specific Workgroup
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/exchangeRate',
    description=""" Get Exchange Rate List """,
    tags=['exchange_rate_management', 'workgroup_management'],
)
def get_exchange_rate_list(workgroup_id: str):
    """
    Get Exchange Rate List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/exchangeRate',
    description=""" Create Exchange Rates """,
    tags=['exchange_rate_management', 'workgroup_management'],
)
def post_exchange_rate(workgroup_id: str, body: MultiExchangeRatePersistListVO = None):
    """
    Create Exchange Rates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/myTimeCards',
    description=""" List my time cards """,
    tags=['time_card_management', 'workgroup_management'],
)
def get_my_time_card_list(workgroup_id: str):
    """
    List my time cards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/myTimeCards/{timeCard_id}',
    description=""" Get a specific my time cards """,
    tags=['time_card_management', 'workgroup_management'],
)
def get_my_time_card(
    workgroup_id: str, time_card_id: str = Path(..., alias='timeCard_id')
):
    """
    Get a specific my time cards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/productTypes',
    description=""" Get product type of workgroup level """,
    tags=['workgroup_management', 'product_type_management'],
)
def get_product_type_list_of_workgroup(workgroup_id: str):
    """
    Get product type of workgroup level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/productTypesOfSpecTypes',
    description=""" Get product type of spec level by workgroupId """,
    tags=['workgroup_management', 'product_type_management', 'spec_management'],
)
def get_spec_product_type_list_of_workgroup(workgroup_id: str):
    """
    Get product type of spec level by workgroupId
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/productTypesOfSpecTypes',
    description=""" Register product types for spec types """,
    tags=['project_spec_handling', 'product_type_management', 'spec_management'],
)
def post_spec_product_type_list_of_workgroup(
    workgroup_id: str, body: WgSpecPrdTypeRegPersistVO = None
):
    """
    Register product types for spec types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/profileImage',
    description=""" Upload Profile Image.  A multipart/form-data request with a name "file" """,
    tags=['file_management', 'file_upload_management', 'workgroup_management'],
)
def upload_profile_image(workgroup_id: str, body: bytes = None):
    """
    Upload Profile Image.  A multipart/form-data request with a name "file"
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projectCategory',
    description=""" List the project categories """,
    tags=['client_workgroup_operations', 'workgroup_management'],
)
def get_project_category_list(workgroup_id: str):
    """
    List the project categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projectHomeUserFields',
    description=""" List projec home user fields """,
    tags=[
        'workgroup_management',
        'client_workgroup_operations',
        'workgroup_member_management',
    ],
)
def get_project_home_user_fields_list(workgroup_id: str):
    """
    List projec home user fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projectStatus',
    description=""" List the project status """,
    tags=['workgroup_management', 'project_management'],
)
def get_project_status(workgroup_id: str):
    """
    List the project status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects',
    description=""" List the projects """,
    tags=['project_management', 'workgroup_management', 'client_workgroup_operations'],
)
def get_project_list(workgroup_id: str):
    """
    List the projects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects',
    description=""" Create a Project """,
    tags=['project_management', 'workgroup_management'],
)
def post_project(workgroup_id: str, body: ProjectPersistVO = None):
    """
    Create a Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}',
    description=""" Archieve a specific Project """,
    tags=['project_management'],
)
def delete_project(workgroup_id: str, project_id: str = ...):
    """
    Archieve a specific Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}',
    description=""" Get a specific Project """,
    tags=['project_management', 'workgroup_management'],
)
def get_project(workgroup_id: str, project_id: str = ...):
    """
    Get a specific Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}',
    description=""" Patch a specific Project """,
    tags=['project_management', 'project_spec_handling'],
)
def patch_project(
    workgroup_id: str, project_id: str = ..., body: ProjectPatchPO = None
):
    """
    Patch a specific Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}',
    description=""" Update a specific Project """,
    tags=['project_management', 'workgroup_management'],
)
def put_project(
    workgroup_id: str, project_id: str = ..., body: ProjectPersistVO = None
):
    """
    Update a specific Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders',
    description=""" List the buy orders """,
    tags=['buy_order_management', 'billing_management'],
)
def get_buy_order_list(workgroup_id: str, project_id: str = ...):
    """
    List the buy orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders',
    description=""" Create a quick buy order """,
    tags=['buy_order_management', 'project_management'],
)
def post_buy_order(workgroup_id: str, project_id: str = ..., body: OrderPO = None):
    """
    Create a quick buy order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders/{order_id}',
    description=""" Get a specific buy order """,
    tags=['buy_order_management', 'project_management'],
)
def get_buy_order(workgroup_id: str, project_id: str = ..., order_id: str = ...):
    """
    Get a specific buy order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders/{order_id}',
    description=""" Update a specific buy order """,
    tags=['buy_order_management', 'project_management'],
)
def put_buy_order(
    workgroup_id: str,
    project_id: str = ...,
    order_id: str = ...,
    body: OrderUpdPersistVO = None,
):
    """
    Update a specific buy order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/children',
    description=""" Attach children projects to specific Project """,
    tags=['project_management', 'workgroup_management'],
)
def attach_project(
    workgroup_id: str, project_id: str = ..., body: ProjectIdListVO = None
):
    """
    Attach children projects to specific Project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/estimates',
    description=""" List the Estimates """,
    tags=['estimate_management', 'workgroup_management'],
)
def get_estimate_list(workgroup_id: str, project_id: str = ...):
    """
    List the Estimates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/estimates',
    description=""" Create a Estimate """,
    tags=['estimate_management', 'project_management'],
)
def post_estimate(workgroup_id: str, project_id: str = ..., body: EstimatePO = None):
    """
    Create a Estimate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/estimates/{estimate_id}',
    description=""" Get a specific estimate of project """,
    tags=['estimate_management', 'project_management'],
)
def get_estimate(workgroup_id: str, project_id: str = ..., estimate_id: str = ...):
    """
    Get a specific estimate of project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/invoices/orders/{order_id}',
    description=""" List invoices by a specific order """,
    tags=['billing_management', 'invoice_management'],
)
def get_invoices(workgroup_id: str, project_id: str = ..., order_id: str = ...):
    """
    List invoices by a specific order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/invoices/{invoice_id}',
    description=""" List a specific invoice of project Level """,
    tags=['invoice_management', 'project_management'],
)
def get_invoice(workgroup_id: str, project_id: str = ..., invoice_id: str = ...):
    """
    List a specific invoice of project Level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/invoices/{invoice_id}/files',
    description=""" List files of invoice Level """,
    tags=['file_management', 'invoice_management', 'workgroup_management'],
)
def get_invoice_files(workgroup_id: str, project_id: str = ..., invoice_id: str = ...):
    """
    List files of invoice Level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/memberroles/{user_id}',
    description=""" List all the role options for the user """,
    tags=['user_role_management', 'workgroup_management', 'project_management'],
)
def get_member_roles(workgroup_id: str, project_id: str = ..., user_id: str = ...):
    """
    List all the role options for the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/orders/{order_id}',
    description=""" Get a specific buy/sell order """,
    tags=['buy_order_management', 'sell_order_management'],
)
def get_order(workgroup_id: str, project_id: str = ..., order_id: str = ...):
    """
    Get a specific buy/sell order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes',
    description=""" List the quotes """,
    tags=['quote_management', 'workgroup_quote_management'],
)
def get_quote_list(
    workgroup_id: str,
    project_id: str = ...,
    quote_state_id__use_filters___quote_state_id__111111_: Optional[str] = Query(
        None, alias='quote_state_id, use filters={"quote_state_id":111111}'
    ),
):
    """
    List the quotes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes/{quote_id}',
    description=""" Get a specific quote of project """,
    tags=['quote_management', 'workgroup_quote_management'],
)
def get_quote(workgroup_id: str, project_id: str = ..., quote_id: str = ...):
    """
    Get a specific quote of project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes/{quote_id}',
    description=""" Accept / Reject a Quote """,
    tags=['quote_management', 'workgroup_quote_management'],
)
def put_quote(
    workgroup_id: str,
    project_id: str = ...,
    quote_id: str = ...,
    body: QuotePutPersistVO = None,
):
    """
    Accept / Reject a Quote
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/rfes',
    description=""" List the RFES """,
    tags=['rfe_management', 'workgroup_management'],
)
def get_rfe_list(workgroup_id: str, project_id: str = ...):
    """
    List the RFES
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/rfes',
    description=""" Create a RFE """,
    tags=['rfe_management'],
)
def post_rfe(workgroup_id: str, project_id: str = ..., body: RfePO = None):
    """
    Create a RFE
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/rfes/{rfe_id}',
    description=""" Get a specific Rfe """,
    tags=['rfe_management'],
)
def get_rfe(workgroup_id: str, project_id: str = ..., rfe_id: str = ...):
    """
    Get a specific Rfe
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/rfqs',
    description=""" List the rfqs """,
    tags=['rfq_management', 'workgroup_management'],
)
def get_rfq_list(workgroup_id: str, project_id: str = ...):
    """
    List the rfqs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/rfqs/{rfq_id}',
    description=""" Get a specific Rfq """,
    tags=['rfq_management', 'project_management'],
)
def get_rfq(workgroup_id: str, project_id: str = ..., rfq_id: str = ...):
    """
    Get a specific Rfq
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/sellOrders',
    description=""" List the sell orders """,
    tags=['sell_order_management', 'workgroup_management'],
)
def get_sell_order_list(workgroup_id: str, project_id: str = ...):
    """
    List the sell orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/sellOrders/{order_id}',
    description=""" Get a specific sell order """,
    tags=['sell_order_management'],
)
def get_sell_order(workgroup_id: str, project_id: str = ..., order_id: str = ...):
    """
    Get a specific sell order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/sellOrders/{order_id}',
    description=""" Update / Accept or Reject a specific sell order """,
    tags=['sell_order_management', 'project_management'],
)
def put_sell_order(
    workgroup_id: str,
    project_id: str = ...,
    order_id: str = ...,
    body: OrderUpdPersistVO = None,
):
    """
    Update / Accept or Reject a specific sell order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments',
    description=""" List shipments of project """,
    tags=['shipment_management', 'project_management'],
)
def get_shipment_list(workgroup_id: str, project_id: str = ...):
    """
    List shipments of project
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments',
    description=""" Create a shipment """,
    tags=['shipment_management', 'project_management'],
)
def post_shipment(
    workgroup_id: str, project_id: str = ..., body: ShipmentLocationPostPersistVO = None
):
    """
    Create a shipment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments/{shipment_id}',
    description=""" Get a specific shipment. """,
    tags=['shipment_management'],
)
def get_shipment(workgroup_id: str, project_id: str = ..., shipment_id: str = ...):
    """
    Get a specific shipment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments/{shipment_id}/locations/{location_id}',
    description=""" Update a specific shipment location """,
    tags=['shipment_management'],
)
def put_shipment_location(
    workgroup_id: str,
    project_id: str = ...,
    shipment_id: str = ...,
    location_id: str = ...,
    body: ShipmentLocationPersistVO = None,
):
    """
    Update a specific shipment location
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs',
    description=""" List specs of project Level """,
    tags=['project_spec_handling', 'spec_management'],
)
def get_spec_list(workgroup_id: str, project_id: str = ...):
    """
    List specs of project Level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs',
    description=""" Create a Spec """,
    tags=['project_spec_handling', 'spec_management'],
)
def post_spec(workgroup_id: str, project_id: str = ..., body: SpecPersistVO = None):
    """
    Create a Spec
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}',
    description=""" List a specific spec of project Level """,
    tags=['project_spec_handling', 'spec_management'],
)
def list_project_spec_by_ids(
    workgroup_id: str, project_id: str = ..., spec_id: str = ...
):
    """
    List a specific spec of project Level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}',
    description=""" Update a specific Spec """,
    tags=['project_spec_handling', 'spec_management'],
)
def update_spec_by_ids(
    workgroup_id: str,
    project_id: str = ...,
    spec_id: str = ...,
    body: SpecUpdatePersistVO = None,
):
    """
    Update a specific Spec
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks',
    description=""" Get task list of project level """,
    tags=['task_management', 'project_management'],
)
def get_task_list_of_project(workgroup_id: str, project_id: str = ...):
    """
    Get task list of project level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks',
    description=""" Create a new task """,
    tags=['task_management', 'project_management'],
)
def post_task_for_project(
    workgroup_id: str, project_id: str = ..., body: TaskPersistVO = None
):
    """
    Create a new task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks/{task_id}',
    description=""" Get a sepcific task of project level """,
    tags=['task_management', 'project_management'],
)
def get_task_of_project(workgroup_id: str, project_id: str = ..., task_id: str = ...):
    """
    Get a sepcific task of project level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/teamMembersOfClientProject',
    description=""" List team member of client project side. """,
    tags=['team_member_management', 'workgroup_member_management', 'team_management'],
)
def get_team_member_list_of_client_project(workgroup_id: str, project_id: str = ...):
    """
    List team member of client project side.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers',
    description=""" List team member of project. """,
    tags=['team_management', 'team_member_management'],
)
def get_team_member_list_of_project(workgroup_id: str, project_id: str = ...):
    """
    List team member of project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers',
    description=""" Deprecated, please use 1.1 Version """,
    tags=['workgroup_management', 'contact_management'],
)
def deprecated_post_workgroup_project_teammembers(
    workgroup_id: str, project_id: str = ..., body: ContactUserVO = None
):
    """
    Deprecated, please use 1.1 Version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers/{teammember_id}',
    description=""" Delete a team member for the specific project. """,
    tags=['team_management', 'team_member_management'],
)
def delete_team_member_of_project(
    workgroup_id: str, project_id: str = ..., teammember_id: str = ...
):
    """
    Delete a team member for the specific project.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/quoteStates',
    description=""" List the quote states """,
    tags=['quote_management', 'workgroup_quote_management'],
)
def get_quote_state_list(workgroup_id: str):
    """
    List the quote states
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/quotes',
    description=""" List the quotes of workgroup level """,
    tags=['workgroup_management', 'quote_management', 'workgroup_quote_management'],
)
def get_v1_workgroups__workgroup_id_quotes(
    workgroup_id: str,
    quote_state_id__use_filters___quote_state_id__111111_: Optional[str] = Query(
        None, alias='quote_state_id, use filters={"quote_state_id":111111}'
    ),
):
    """
    List the quotes of workgroup level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/receivedTimeCards',
    description=""" List received time cards """,
    tags=['time_card_management', 'workgroup_management'],
)
def get_received_time_card_list(workgroup_id: str):
    """
    List received time cards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/receivedTimeCards/{timeCard_id}',
    description=""" List a specific received time cards """,
    tags=['time_card_management', 'workgroup_management'],
)
def get_received_time_card(
    workgroup_id: str, time_card_id: str = Path(..., alias='timeCard_id')
):
    """
    List a specific received time cards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/sellOrders',
    description=""" List the sell orders of workgrop """,
    tags=['sell_order_management', 'workgroup_management'],
)
def get_sell_order_list_of_workgroup(workgroup_id: str):
    """
    List the sell orders of workgrop
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/sellOrders/{order_id}',
    description=""" Get a specific sell order """,
    tags=['sell_order_management'],
)
def get_sell_order_of_workgroup(workgroup_id: str, order_id: str = ...):
    """
    Get a specific sell order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/specTemplates',
    description=""" List Spec Templates of Workgroup Level  """,
    tags=['workgroup_management', 'spec_template_management'],
)
def get_spec_template_list(workgroup_id: str):
    """
    List Spec Templates of Workgroup Level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/specTemplates/{spec_template_id}',
    description=""" Get a specific Spec Template """,
    tags=['spec_management', 'spec_template_management'],
)
def get_spec_template(workgroup_id: str, spec_template_id: str = ...):
    """
    Get a specific Spec Template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/specTypes/{spec_type_id}/specTypeFields',
    description=""" Get Spec Type Fields """,
    tags=['project_spec_handling', 'spec_management'],
)
def fetch_spec_type_fields(workgroup_id: str, spec_type_id: str = ...):
    """
    Get Spec Type Fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/supplierWorkgroups',
    description=""" List supplier workgroups """,
    tags=[
        'workgroup_management',
        'client_workgroup_operations',
        'supplier_workgroup_management',
    ],
)
def get_supplier_workgroup_list(workgroup_id: str):
    """
    List supplier workgroups
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/supplierWorkgroups/{bu_supplier_workgroup_id}',
    description=""" Get the specific supplier of My Group """,
    tags=['workgroup_management', 'supplier_workgroup_management'],
)
def get_supplier_workgroup_detail(
    workgroup_id: str, bu_supplier_workgroup_id: str = ...
):
    """
    Get the specific supplier of My Group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/taskTypes',
    description=""" Get task types of workgroup level """,
    tags=['workgroup_management', 'task_management'],
)
def get_task_types_of_workgroup(workgroup_id: str):
    """
    Get task types of workgroup level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/tasks',
    description=""" Get task list of workgroup level """,
    tags=['workgroup_management', 'task_management'],
)
def get_task_list_of_workgroup(workgroup_id: str):
    """
    Get task list of workgroup level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/tasks/{task_id}',
    description=""" Get a sepcific task of workgroup level """,
    tags=['workgroup_management', 'task_management'],
)
def get_task_of_workgroup(workgroup_id: str, task_id: str = ...):
    """
    Get a sepcific task of workgroup level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/teamTemplates',
    description=""" List current user's team templates info  """,
    tags=['team_template_management', 'workgroup_management'],
)
def get_team_template_list(workgroup_id: str):
    """
    List current user's team templates info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/teamTemplates/{team_template_id}',
    description=""" Get current user's team template detal info  """,
    tags=['team_template_management', 'workgroup_management'],
)
def get_team_template_detail(workgroup_id: str, team_template_id: str = ...):
    """
    Get current user's team template detal info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/workgroupMembers',
    description=""" List the workgroup members """,
    tags=['workgroup_management', 'workgroup_member_management'],
)
def get_workgroup_member_list(workgroup_id: str):
    """
    List the workgroup members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/workgroups/{workgroup_id}/workgroupMembers/{user_id}',
    description=""" Workgroup Member Info """,
    tags=[
        'workgroup_management',
        'team_member_management',
        'workgroup_member_management',
    ],
)
def get_workgroup_member_info(workgroup_id: str, user_id: str = ...):
    """
    Workgroup Member Info
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
